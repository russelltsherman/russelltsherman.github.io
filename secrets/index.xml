<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Secrets on Russell T Sherman</title>
    <link>https://russelltsherman.github.io/secrets/</link>
    <description>Recent content in Secrets on Russell T Sherman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://russelltsherman.github.io/secrets/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://russelltsherman.github.io/secrets/aws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://russelltsherman.github.io/secrets/aws/</guid>
      <description>S3 + KMS SSM + KMS Instance Profiles + IAM Roles </description>
    </item>
    
    <item>
      <title>AWS KMS&#43;S3 File Storage</title>
      <link>https://russelltsherman.github.io/secrets/aws-kms-s3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://russelltsherman.github.io/secrets/aws-kms-s3/</guid>
      <description>The AWS KMS+S3 pattern involves provisioning an S3 bucket which enforces encryption at rest together with KMS.
In geodesic, we use this together with goofys and our s3fs wrapper scripts to mount the encrypted bucket to a local mount point inside the geodesic container. This is an awesome solution for securely storing file-based secrets (e.g. ssh master keys).</description>
    </item>
    
    <item>
      <title>AWS KMS&#43;SSM</title>
      <link>https://russelltsherman.github.io/secrets/aws-kms-ssm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://russelltsherman.github.io/secrets/aws-kms-ssm/</guid>
      <description>Prerequisites This assumes you&amp;rsquo;ve followed the Geodesic Module Usage with Terraform guide which covers all the scaffolding necessary to get started.
 Dependencies None
Install Add chamber Terraform Root Module Create a file in /conf/chamber/kms.tf with following content
/conf/chamber/kms-key.tf module &amp;#34;chamber_kms_key&amp;#34; { source = &amp;#34;git::https://github.com/cloudposse/terraform-aws-kms-key.git?ref=tags/0.1.0&amp;#34; namespace = &amp;#34;${module.identity.namespace}&amp;#34; stage = &amp;#34;${module.identity.stage}&amp;#34; name = &amp;#34;chamber&amp;#34; description = &amp;#34;KMS key for chamber&amp;#34; } output &amp;quot;chamber_kms_key_arn&amp;quot; { value = &amp;quot;${module.chamber_kms_key.key_arn}&amp;quot; description = &amp;quot;KMS key ARN&amp;quot; }</description>
    </item>
    
    <item>
      <title>Development Secrets</title>
      <link>https://russelltsherman.github.io/secrets/development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://russelltsherman.github.io/secrets/development/</guid>
      <description>Inevitably, developers working with external APIs will need access to some number of secrets.
Docker Compose Since we prescribe using docker-compose for local development environments, externalizing all parameters and secrets is possible by using environment variables. Combined with chamber, there&amp;rsquo;s an easy way to secure as much as possible the secrets for local consumption and easily rotate them as necessary without needing to distribute/communicate/coordinate the changes to the various engineering teams.</description>
    </item>
    
    <item>
      <title>Secrets Management Anti-patterns</title>
      <link>https://russelltsherman.github.io/secrets/anti-patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://russelltsherman.github.io/secrets/anti-patterns/</guid>
      <description>There are a number of things that should be avoided at all costs.
Never Share Logins Do not let users within your organization share login credentials. If logins are shared, then secrets need to be rotated everytime someone leaves the company. Also, audit trails are ineffective as they cannot adequately attribute changes made by individuals.
Security through Obscurity Obfuscation is a trap that offers only a false-sense of security. Systems that rely largely on obfuscastion are dangerously insecure.</description>
    </item>
    
    <item>
      <title>Secrets Management Best Practices</title>
      <link>https://russelltsherman.github.io/secrets/best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://russelltsherman.github.io/secrets/best-practices/</guid>
      <description>Security by Design Never Share Secrets Between Stages Rotate Secrets Frequently Automate Key Rotation Audit Trails Encrypted at Rest TLS Everywhere MFA Everywhere Password-based security is not sufficient. Too many passwords have been compromised over the years and aggregated as part of massive rainbow tables which make password cracking much more effective. Othertimes, users simply share passwords with eachother and forget to change them. The best wat to mitigate the usefulness of a credential (e.</description>
    </item>
    
    <item>
      <title>Terraform Secrets Management</title>
      <link>https://russelltsherman.github.io/secrets/terraform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://russelltsherman.github.io/secrets/terraform/</guid>
      <description>Terraform supports 12-factor style environment variables. Thus we prescribe using a combination of terraform environment variables and chamber.
Usage First, review our documentation on using chamber to manage secrets.
Access Secrets from HCL To access secrets within terraform code, simply refer to a variable. Do not set a default value to enforce that the value come from the environment.
variable &amp;#34;POSTGRES_PASSWORD&amp;#34; { description = &amp;#34;Master password for Postgres database&amp;#34; } Since chamber will export all environment variables as strictly upper case, make sure that you define all variables in terraform in upper case as well.</description>
    </item>
    
    <item>
      <title>Using Secrets with CI/CD</title>
      <link>https://russelltsherman.github.io/secrets/cicd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://russelltsherman.github.io/secrets/cicd/</guid>
      <description>We advocate using chamber with all CI/CD pipelines to access secrets. Chamber provides a universal interface and a single &amp;ldquo;system of record&amp;rdquo; for storing and rotating secrets.
Enabling CI/CD systems to access chamber depends on the CI/CD solution. For CodeBuild/CodePipeline, it&amp;rsquo;s possible to leverage IAM Roles to grant access to KMS+SSM, while for other systems which are external to AWS, it&amp;rsquo;s necessary to provision a chamber IAM user with a very limited scope (the link provides an example for how we do this using terraform).</description>
    </item>
    
  </channel>
</rss>