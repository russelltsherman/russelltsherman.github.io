<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>secrets on Russell T Sherman</title>
    <link>https://russelltsherman.github.io/tags/secrets/</link>
    <description>Recent content in secrets on Russell T Sherman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://russelltsherman.github.io/tags/secrets/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Chamber</title>
      <link>https://russelltsherman.github.io/glossary/chamber/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://russelltsherman.github.io/glossary/chamber/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Chamber</title>
      <link>https://russelltsherman.github.io/tools/chamber/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://russelltsherman.github.io/tools/chamber/</guid>
      <description>Chamber is a CLI for managing secrets stored in AWS Systems Manager Parameter Store.
In the article The Right Way to Store Secrets using Parameter Store, AWS recommends using chamber for secrets management.
Configuration Prerequisites This assumes you&amp;rsquo;ve followed the AWS KMS guide which describes using Terraform to easily provision KMS+SSM resources for chamber.
 Chamber with Geodesic From the Terraform outputs AWS KMS copy the chamber_kms_key_alias_name into the ENV var CHAMBER_KMS_KEY_ALIAS in the geodesic module`s Dockerfile.</description>
    </item>
    
    <item>
      <title>Key Management Service (KMS)</title>
      <link>https://russelltsherman.github.io/glossary/kms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://russelltsherman.github.io/glossary/kms/</guid>
      <description>AWS Key Management Service is integrated with most other AWS services to help you protect the data you store with these services. AWS Key Management Service is also integrated with AWS CloudTrail to provide you with logs of all key usage to help meet your regulatory and compliance needs.</description>
    </item>
    
    <item>
      <title>Secrets Management Best Practices</title>
      <link>https://russelltsherman.github.io/secrets/best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://russelltsherman.github.io/secrets/best-practices/</guid>
      <description>Security by Design Never Share Secrets Between Stages Rotate Secrets Frequently Automate Key Rotation Audit Trails Encrypted at Rest TLS Everywhere MFA Everywhere Password-based security is not sufficient. Too many passwords have been compromised over the years and aggregated as part of massive rainbow tables which make password cracking much more effective. Othertimes, users simply share passwords with eachother and forget to change them. The best wat to mitigate the usefulness of a credential (e.</description>
    </item>
    
    <item>
      <title>Using Secrets with CI/CD</title>
      <link>https://russelltsherman.github.io/secrets/cicd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://russelltsherman.github.io/secrets/cicd/</guid>
      <description>We advocate using chamber with all CI/CD pipelines to access secrets. Chamber provides a universal interface and a single &amp;ldquo;system of record&amp;rdquo; for storing and rotating secrets.
Enabling CI/CD systems to access chamber depends on the CI/CD solution. For CodeBuild/CodePipeline, it&amp;rsquo;s possible to leverage IAM Roles to grant access to KMS+SSM, while for other systems which are external to AWS, it&amp;rsquo;s necessary to provision a chamber IAM user with a very limited scope (the link provides an example for how we do this using terraform).</description>
    </item>
    
  </channel>
</rss>